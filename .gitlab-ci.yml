variables:
  # Mnemonic: SF: Search Frontend; SB: Search Backend
  SF_JSON: kibana.json
  SF_REPO_URL: "https://github.com/elastic/kibana.git"
  SF_REPO_DIR: kibana
  SG_SB_PLUGIN_RELEASE_REPO: search-guard-flx-release
  SG_SB_PLUGIN_SNAPSHOT_REPO: search-guard-flx-snapshot
  SG_SB_PLUGIN_NAME: search-guard-flx-elasticsearch-plugin
  NODE_VERSION: 16.13.0

  #####
  SG_BUILD_IMAGE: "floragunncom/ci-pipeline-focal-mvn38-java17:0.1.0"
  DOCKER_VERSION: "20.10.17"
  
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"
  MAVEN_CLI_OPTS: "--batch-mode -s settings.xml -q -U"
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"

  GIT_DEPTH: 10

default:
  image: $SG_BUILD_IMAGE
  tags:
    - build
  interruptible: true
  timeout: 90m

workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
      when: never
    - when: always

before_script:
  - apk add --no-cache gomplate jq curl zip xmlstarlet git wget bash sudo || true

stages:
  - prepare
  - build
  - package
  - "Frontend Int Tests"
  - release

prepare_env:
  stage: prepare 
  script:
    - |

      source ci/utils.sh

      if [ -d $SF_REPO_DIR ]; then 
          echo "$SF_REPO_DIR summary:"
          du --summarize -h $SF_REPO_DIR
      fi

      if [[ $CI_COMMIT_TAG =~ ^sg-flx-([a-z0-9\.\-]+)-(es)-([0-9\.]+)$ ]]; then
          #1.0.0
          export SG_SF_PLUGIN_VERSION=${BASH_REMATCH[1]}
          
          #1.0.0-es-7.17.6
          export BUILD_VERSION="${BASH_REMATCH[1]}-${BASH_REMATCH[2]}-${BASH_REMATCH[3]}"
          
          #7.17.6
          export SF_VERSION=${BASH_REMATCH[3]}
      else    
          export SG_SF_PLUGIN_VERSION="b-$CI_COMMIT_REF_NAME-SNAPSHOT"
          export BUILD_VERSION="b-$CI_COMMIT_REF_NAME-SNAPSHOT"
          export SF_VERSION=$(grep -e '\bversion\b' $SF_JSON | tr -d "[:blank:]" | sed -E 's/"version":"(.*)"(.*)/\1/')
      fi

      echo "SG_SF_PLUGIN_VERSION=$SG_SF_PLUGIN_VERSION" >> benv.env
      echo "BUILD_VERSION=$BUILD_VERSION" >> benv.env
      echo "SF_VERSION=$SF_VERSION" >> benv.env

      echo "================================="
      echo "SG_SF_PLUGIN_VERSION: $SG_SF_PLUGIN_VERSION"
      echo "BUILD_VERSION: $BUILD_VERSION"
      echo "SF_VERSION: $SF_VERSION"
      echo "================================="


  artifacts:
    when: always
    expire_in: 2 days
    reports:
      dotenv: benv.env

# This case is for usual commit to the branch, doing only unit testing and local build
build:
  stage: build
  rules:
    - if: '$CI_COMMIT_TAG =~ /^sg-flx-.*/'
      when: never
    - when: always
  script:
    - |
      set -e
      source ci/install_dependencies.sh
      source ci/init_build.sh
      echo "SG_SF_PLUGIN_VERSION=$SG_SF_PLUGIN_VERSION" >> benv.env
      echo "BUILD_VERSION=$BUILD_VERSION" >> benv.env
      echo "SF_VERSION=$SF_VERSION" >> benv.env
  artifacts:
    when: always
    reports:
      dotenv: benv.env
      junit:
        - junit*.xml
    paths:
      - "build.log"
      - "build/*"
      - junit*.xml
    expire_in: 24h
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - ./${SF_REPO_DIR}

# This case is for release tag commit to the branch, doing only unit testing and local build
# no cache
build_release:
  stage: build
  rules:
    - if: '$CI_COMMIT_TAG =~ /^sg-flx-.*/'
  script:
    - |
      set -e
      
      #In kibana.json
      # "version": "7.17.6"

      #In package.json
      # "version": "1.0.0-es-7.17.6"
      
      # Prepare package.json and kibana.json for release
      sed -i -e "s#\"version\":.*\"#\"version\": \"$SF_VERSION\"#" $SF_JSON
      sed -i -e "s#\"version\":.*\"#\"version\": \"$BUILD_VERSION\"#" package.json
      
      source ci/install_dependencies.sh
      source ci/init_build.sh
      echo "SG_SF_PLUGIN_VERSION=$SG_SF_PLUGIN_VERSION" >> benv.env
      echo "BUILD_VERSION=$BUILD_VERSION" >> benv.env
      echo "SF_VERSION=$SF_VERSION" >> benv.env
  artifacts:
    when: always
    paths:
      - "build.log"
      - "build/*"
      - junit*.xml
    expire_in: 24h
    reports:
      dotenv: benv.env

deploy_snapshot:
  stage: package
  #needs:
  #  - job: build
  #    artifacts: true
  #rules:
  #  - if: '$CI_COMMIT_TAG =~ /^sg-flx-.*/'
  #   when: never
  #  - when: always  
  script:
    - ci/deploy.sh
    - |
      echo "SG_SF_PLUGIN_VERSION=$SG_SF_PLUGIN_VERSION" >> build.env
      echo "BUILD_VERSION=$BUILD_VERSION" >> build.env
      echo "SF_VERSION=$SF_VERSION" >> build.env
  artifacts:
    when: always
    expire_in: 2 days
    reports:
      dotenv: build.env
    paths:
      - "target/*"

deploy_release:
  stage: release
  rules:
    - if: '$CI_COMMIT_TAG =~ /^sg-flx-.*/'
  script:
    - |
      ci/setup_gpg.sh
      ci/deploy.sh
      start_section deploy "Deploying to release repository"
      mvn -B -s settings.xml -Drevision="$BUILD_VERSION" deploy
      end_section deploy

include:
  - local: '.gitlab-ci-branch-specific.yml'
  - local: 'ci/frontend-int-tests.yml'
