variables:
  SG_JAVA_BUILD_VERSION: "8"
  # Mnemonic: SF: Search Frontend; SB: Search Backend
  SF_PRODUCT: opensearch-dashboards
  SF_JSON: opensearch_dashboards.json
  SF_REPO_URL: "https://github.com/opensearch-project/OpenSearch-Dashboards.git"
  SF_REPO_DIR: OpenSearch-Dashboards
  SB_PRODUCT: opensearch
  NODE_VERSION: 14.17.3

image: circleci/openjdk:${SG_JAVA_BUILD_VERSION}-jdk-browsers

workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
      when: never
    - when: always

before_script:
  - |
    source ci/utils.sh
    if [ -d $SF_REPO_DIR ]; then du --summarize -h $SF_REPO_DIR; fi
    if [[ $CI_COMMIT_TAG =~ ^sg-flx-([a-z0-9\.\-]+)-([oe]s)-([0-9\.]+)$ ]]; then
      export SG_SF_PLUGIN_VERSION=${BASH_REMATCH[1]}
      export BUILD_VERSION="${BASH_REMATCH[1]}-${BASH_REMATCH[2]}-${BASH_REMATCH[3]}"
      export SF_VERSION=${BASH_REMATCH[3]}
    else
      export SG_SF_PLUGIN_VERSION="b-$CI_COMMIT_REF_NAME-SNAPSHOT"
      export BUILD_VERSION="b-$CI_COMMIT_REF_NAME-SNAPSHOT"
      export SF_VERSION=$(grep -e '\bversion\b' $SF_JSON | tr -d "[:blank:]" | sed -E 's/"version":"(.*)"(.*)/\1/')
    fi
    echo "================================="
    echo "SG_SF_PLUGIN_VERSION: $SG_SF_PLUGIN_VERSION"
    echo "BUILD_VERSION: $BUILD_VERSION"
    echo "SF_VERSION: $SF_VERSION"
    echo "================================="

stages:
  - build
  - package
  - "Frontend Int Tests Core"
  - "Frontend Int Tests Features"
  - "Frontend Int Tests External Features"
  - release

#This case is for usual commit to the branch, doing only unit testing and local build
build:
  stage: build
  tags:
    - build
  rules:
    - if: '$CI_COMMIT_TAG =~ /^sg-.*/'
      when: never
    - when: always
  script:
    - |
      set -e
      set -x
      source ci/install_dependencies.sh
      source ci/init_build.sh
      start_section tests "Unit Tests"
      cd $SF_REPO_DIR/plugins/eliatrasuite
      export JEST_JUNIT_OUTPUT_FILE=$CI_PROJECT_DIR/junit-server.xml
      #../../node_modules/.bin/jest --clearCache && ../../node_modules/.bin/jest --testPathIgnorePatterns=server --config ./tests/jest.config.js --reporters="jest-junit" --reporters="default"
      export JEST_JUNIT_OUTPUT_FILE=$CI_PROJECT_DIR/junit-public.xml
      #../../node_modules/.bin/jest --clearCache && ../../node_modules/.bin/jest --testPathIgnorePatterns=public  --config ./tests/jest.config.js --reporters="jest-junit" --reporters="default"
      end_section tests
      rm -rf "node_modules"
      start_section build "Building Plugin"
      start_section yarn_install "Doing yarn install --production"
      yarn install --production
      end_section yarn_install
      start_section yarn_build "Doing yarn build -v $SF_VERSION --skip-archive"
      yarn build -v $SF_VERSION --skip-archive
      end_section yarn_build
      end_section build
      # Move build result from repo dir to the build folder in the CI root dir.
      cd $CI_PROJECT_DIR
      rm -rf build
      mv $SF_REPO_DIR/plugins/eliatrasuite/build build
      # Remove eliatrasuite dir from repo to have a clean repo for the Gitlab CI cache
      rm -rf $SF_REPO_DIR/plugins/eliatrasuite
  interruptible: true
  artifacts:
    when: always
    paths:
      - "build.log"
      - "build/*"
    expire_in: 24h
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - ./${SF_REPO_DIR}

#This case is for release tag commit to the branch, doing only unit testing and local build
build_release:
  stage: build
  rules:
    - if: '$CI_COMMIT_TAG =~ /^sg-.*/'
  tags:
    - build
  script:
    - |
      set -e
      sed -i -e "s#\"version\":.*\"#\"version\": \"$SF_VERSION\"#" $SF_JSON
      sed -i -e "s#\"version\":.*\"#\"version\": \"$BUILD_VERSION\"#" package.json
      source ci/install_dependencies.sh
      source ci/init_build.sh
      start_section tests "Unit Tests"
      cd $SF_REPO_DIR/plugins/eliatrasuite
      export JEST_JUNIT_OUTPUT_FILE=$CI_PROJECT_DIR/junit-server.xml
      ../../node_modules/.bin/jest --clearCache && ../../node_modules/.bin/jest --testPathIgnorePatterns=server --config ./tests/jest.config.js --reporters="jest-junit" --reporters="default"
      export JEST_JUNIT_OUTPUT_FILE=$CI_PROJECT_DIR/junit-public.xml
      ../../node_modules/.bin/jest --clearCache && ../../node_modules/.bin/jest --testPathIgnorePatterns=public  --config ./tests/jest.config.js --reporters="jest-junit" --reporters="default"
      end_section tests
      rm -rf "node_modules"
      start_section build "Building Plugin"
      start_section yarn_install "Doing yarn install --production"
      yarn install --production
      end_section yarn_install
      start_section yarn_build "Doing yarn build -v $SF_VERSION --skip-archive"
      yarn build -v $SF_VERSION --skip-archive
      end_section yarn_build
      end_section build
      cd $CI_PROJECT_DIR
      rm -rf build
      mv $SF_REPO_DIR/plugins/eliatrasuite/build build
      rm -rf $SF_REPO_DIR/plugins/eliatrasuite
  artifacts:
    when: always
    paths:
      - "build.log"
      - "build/*"
    expire_in: 24h

deploy_snapshot:
  stage: package
  interruptible: true
  tags:
    - build
  rules:
    - if: '$CI_COMMIT_TAG =~ /^sg-.*/'
      when: never
    - when: always
  script:
    - ci/deploy.sh
  artifacts:
    when: always
    expire_in: 7 days
    reports:
      dotenv: build.env

deploy_staging:
  stage: package
  tags:
    - build
  script:
    - ci/deploy.sh staging
  needs:
    - job: build_release
      artifacts: true
  rules:
    - if: '$CI_COMMIT_TAG =~ /^sg-.*/'
  artifacts:
    when: always
    expire_in: 7 days
    reports:
      dotenv: build.env


deploy_release:
  stage: release
  interruptible: true
  rules:
    - if: '$CI_COMMIT_TAG =~ /^sg-.*/'
  tags:
    - build
  script:
    - |
      echo "Removing current release from Staging"
      curl -u "$ARTIFACTORY_USER:$ARTIFACTORY_PASSWORD" -X DELETE "https://maven.eliatra.com/artifactory/eliatra-suite-staging/com/eliatra/suite/eliatra-suite-opensearch-dashboards-plugin/$BUILD_VERSION" || true
      start_section deploy "Deploying to release repository"
      mvn -B -s settings.xml -Drevision="$BUILD_VERSION" deploy
      end_section deploy

include:
  - local: '.gitlab-ci-branch-specific.yml'
  - local: 'ci/frontend-int-tests.yml'
  - local: 'ci/frontend-int-tests-features.yml'
