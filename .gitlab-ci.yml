variables:
  # Mnemonic: SF: Search Frontend; SB: Search Backend
  SF_JSON: kibana.json
  SF_REPO_URL: "https://github.com/elastic/kibana.git"
  SF_REPO_DIR: kibana
  SG_SB_PLUGIN_RELEASE_REPO: search-guard-flx-release
  SG_SB_PLUGIN_SNAPSHOT_REPO: search-guard-flx-snapshot
  SG_SB_PLUGIN_NAME: search-guard-flx-elasticsearch-plugin
  NODE_VERSION: 16.13.0
  AIKIDO_BASE_BRANCH: main-es8

  #####
  SG_BUILD_IMAGE: "floragunncom/ci-pipeline-focal-mvn38-java17:0.1.0"
  DOCKER_VERSION: "20.10.17"

  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"
  MAVEN_CLI_OPTS: "--batch-mode -s settings.xml -q -U"
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"

  GIT_DEPTH: 10

default:
  image: $SG_BUILD_IMAGE
  tags:
    - build
  interruptible: true
  timeout: 90m

workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
      when: never
    - when: always


before_script:
  - |
    if [ -x "$(command -v apk)" ]; then
      apk add --no-cache gomplate jq curl zip xmlstarlet git wget bash sudo 
    elif [ -x "$(command -v apt)" ]; then
      apt update
      apt install -y jq curl zip xmlstarlet git wget bash build-essential
    else
      echo "Unsupported package manager"
      exit 1
    fi


stages:
  - prepare
  - build
  - package
  - "Frontend Int Tests"
  - "Aikido Scan"
  - release
  - "Deploy Docker Images"  
prepare_env:
  stage: prepare
  script:
    - |

      source ci/utils.sh

      if [ -d $SF_REPO_DIR ]; then du --summarize -h $SF_REPO_DIR; fi    
      REGEX_VERSION="^sg-flx-([a-z0-9\.\-]+)-([oe]s)-([0-9\.]+)$"

      if echo "$CI_COMMIT_TAG" | grep -qE "$REGEX_VERSION"; then
        
        # sg-flx-0.0.1-es-8.7.1
        
        RESULT=$(echo "$CI_COMMIT_TAG" | sed -n -E "s/$REGEX_VERSION/\1 \2 \3/p")
        export SG_SF_PLUGIN_VERSION=$(echo $RESULT | awk '{print $1}')
        export BUILD_VERSION=$(echo $RESULT | awk '{print $1"-"$2"-"$3}')
        export SF_VERSION=$(echo $RESULT | awk '{print $3}')
      else

        export SG_SF_PLUGIN_VERSION="b-$CI_COMMIT_REF_SLUG-SNAPSHOT"
        export BUILD_VERSION="b-$CI_COMMIT_REF_SLUG-SNAPSHOT"
        export SF_VERSION=$(grep -e '\bversion\b' $SF_JSON | tr -d "[:blank:]" | sed -E 's/"version":"(.*)"(.*)/\1/')
      fi

      echo "SG_SF_PLUGIN_VERSION=$SG_SF_PLUGIN_VERSION" >> benv.env
      echo "BUILD_VERSION=$BUILD_VERSION" >> benv.env
      echo "SF_VERSION=$SF_VERSION" >> benv.env

      echo "================================="
      echo "SG_SF_PLUGIN_VERSION: $SG_SF_PLUGIN_VERSION"
      echo "BUILD_VERSION: $BUILD_VERSION"
      echo "SF_VERSION: $SF_VERSION"
      echo "================================="


  artifacts:
    when: always
    expire_in: 2 days
    reports:
      dotenv: benv.env

# This case is for usual commit to the branch, doing only unit testing and local build
build:
  stage: build
  rules:
    - if: '$DOCKER_ONLY'
      when: never
    - if: '$CI_COMMIT_TAG =~ /^sg-flx-.*/'
      when: never
    - when: always
  script:
    - |
      set -e
      source ci/install_dependencies.sh
      echo "sleep debug"
      sleep 3600
      source ci/init_build.sh
      echo "SG_SF_PLUGIN_VERSION=$SG_SF_PLUGIN_VERSION" >> benv.env
      echo "BUILD_VERSION=$BUILD_VERSION" >> benv.env
      echo "SF_VERSION=$SF_VERSION" >> benv.env
  artifacts:
    when: always
    reports:
      dotenv: benv.env
      junit:
        - junit*.xml
    paths:
      - "build.log"
      - "build/*"
      - junit*.xml
    expire_in: 24h
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - ./${SF_REPO_DIR}

# This case is for release tag commit to the branch, doing only unit testing and local build
# no cache
build_release:
  stage: build
  rules:
    - if: '$DOCKER_ONLY'
      when: never
    - if: '$CI_COMMIT_TAG =~ /^sg-flx-.*/'
  script:
    - |
      set -e
      #In kibana.json
      # "version": "7.17.6"

      #In package.json
      # "version": "1.0.0-es-7.17.6"
      
      # Prepare package.json and kibana.json for release
      sed -i -e "s#\"version\":.*\"#\"version\": \"$SF_VERSION\"#" $SF_JSON
      sed -i -e "s#\"version\":.*\"#\"version\": \"$BUILD_VERSION\"#" package.json
      
      source ci/install_dependencies.sh
      source ci/init_build.sh
      echo "SG_SF_PLUGIN_VERSION=$SG_SF_PLUGIN_VERSION" >> benv.env
      echo "BUILD_VERSION=$BUILD_VERSION" >> benv.env
      echo "SF_VERSION=$SF_VERSION" >> benv.env
  artifacts:
    when: always
    paths:
      - "build.log"
      - "build/*"
      - junit*.xml
    expire_in: 24h
    reports:
      dotenv: benv.env

deploy_snapshot:
  stage: package
  tags:
    - openstack-runner
  #needs:
  #  - job: build
  #    artifacts: true
  #rules:
  #  - if: '$CI_COMMIT_TAG =~ /^sg-flx-.*/'
  #   when: never
  #  - when: always
  script:
    - ci/deploy.sh
    - |
      echo "SG_SF_PLUGIN_VERSION=$SG_SF_PLUGIN_VERSION" >> build.env
      echo "BUILD_VERSION=$BUILD_VERSION" >> build.env
      echo "SF_VERSION=$SF_VERSION" >> build.env
  artifacts:
    when: always
    expire_in: 2 days
    reports:
      dotenv: build.env
    paths:
      - "target/*"

deploy_release:
  stage: release
  rules:
    - if: '$DOCKER_ONLY'
      when: never
    - if: '$CI_COMMIT_TAG =~ /^sg-flx-.*/'
  tags:
    - openstack-runner
  script:
    - |
      ci/setup_gpg.sh
      ci/deploy.sh
      mvn -B -s settings.xml -Drevision="$BUILD_VERSION" deploy

deploy_docker_release_image:
  stage: "Deploy Docker Images"
  image: docker:20.10.17
  services:
    - docker:20.10.17-dind
  rules:
    - if: '$CI_COMMIT_TAG =~ /^sg-flx-.*/'
      when: always
    - if: '$DOCKER_ONLY'
      when: on_success
  tags:
    - build
  timeout: 1h
  script:
    - |
      cd docker
      apk update && apk add bash curl 

      if [[ -z "$SF_VERSION" || -z "$SG_SF_PLUGIN_VERSION" ]]; then
        echo "SF_VERSION is empty or SG_SF_PLUGIN_VERSION is empty"
        exit 1
      fi
    
      echo "SF_VERSION=$SF_VERSION"
      echo "SG_SF_PLUGIN_VERSION=$SG_SF_PLUGIN_VERSION"
      
            
      echo "Docker logout"
      docker logout 
      
      echo "Login in into Docker Hub"      
      echo "$DOCKER_PASSWORD" | docker login --username floragunncom --password-stdin docker.io > /dev/null

      echo ""
      echo "Enable qemu-user-static to support docker multiarch builds with buildx"
      docker run --rm --privileged multiarch/qemu-user-static --reset -p yes > /dev/null
    
      
      ./build_and_push.sh "floragunncom" "docker.io" "search-guard-flx-kibana" "$SG_SF_PLUGIN_VERSION-es-$SF_VERSION" "--build-arg ELK_VERSION="$SF_VERSION"  --build-arg SG_KIBANA_VERSION="$SG_SF_PLUGIN_VERSION"" 
  allow_failure: false

deploy_docker_demo_image:
  stage: "Deploy Docker Images"
  image: docker:20.10.17
  services:
    - docker:20.10.17-dind
  rules:
    - if: '$CI_COMMIT_TAG =~ /^sg-flx-.*/'
      when: always
    - if: '$DOCKER_ONLY'
      when: on_success
  tags:
    - build
  timeout: 1h
  script:
    - |
      cd docker

      apk update && apk add bash curl 

      if [[ -z "$SF_VERSION" || -z "$SG_SF_PLUGIN_VERSION" ]]; then
        echo "SF_VERSION is empty or SG_SF_PLUGIN_VERSION is empty"
        exit 1
      fi
    
      echo "SF_VERSION=$SF_VERSION"
      echo "SG_SF_PLUGIN_VERSION=$SG_SF_PLUGIN_VERSION"
      
            
      echo "Docker logout"
      docker logout 
      
      echo "Login in into Docker Hub"      
      echo "$DOCKER_PASSWORD" | docker login --username floragunncom --password-stdin docker.io > /dev/null

      echo ""
      echo "Enable qemu-user-static to support docker multiarch builds with buildx"
      docker run --rm --privileged multiarch/qemu-user-static --reset -p yes > /dev/null
    
      ./build_and_push_demo.sh $SF_VERSION $SG_SF_PLUGIN_VERSION
  allow_failure: false

include:
  - local: '.gitlab-ci-branch-specific.yml'
  - local: 'ci/frontend-int-tests.yml'
  - local: 'ci/aikido.yml'  
