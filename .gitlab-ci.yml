variables:
  SG_JAVA_BUILD_VERSION: "8"

image: circleci/openjdk:${SG_JAVA_BUILD_VERSION}-jdk-browsers

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - ./node_modules/

workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
      when: never
    - when: always


stages:
  - build
  - package
  - kibana_build
  - integration_sgkibana_tests
  - release

#This case is for usual commit to the branch, doing only unit testing and local build
unit_tests:
  stage: build
  tags:
    - openstack-runner
  rules:
    - if: '$CI_COMMIT_TAG =~ /^sg-.*/'
      when: never
    - when: always
  before_script:
    - |
      curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh| bash
      export NVM_HOME=~/.nvm
      export NVM_DIR="$HOME/.nvm"
      [ -s "$NVM_DIR/nvm.sh" ]; \. "$NVM_DIR/nvm.sh"
      export MAVEN_HOME=/opt/apache-maven
  script:
    - ./build.sh install-local
  interruptible: true
  artifacts:
    when: always
    paths:
      - "build.log"
      - "build/kibana/*"
    expire_in: 24h

#This case is for release tag commit to the branch, doing only unit testing and local build
unit_tests_release:
  stage: build
  tags:
    - openstack-runner
  before_script:
    - |
      curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh| bash
      export NVM_HOME=~/.nvm
      export NVM_DIR="$HOME/.nvm"
      [ -s "$NVM_DIR/nvm.sh" ]; \. "$NVM_DIR/nvm.sh"
      export MAVEN_HOME=/opt/apache-maven
  script:
    - |
      export KIBANA_VERSION=$(echo $CI_COMMIT_TAG | cut -d- -f4)
      export KIBANA_PLUGIN_VERSION=$(echo $CI_COMMIT_TAG | cut -d- -f2|cut -d. -f2-)'.0'
      sed -i -e "s#\"version\":.*\"#\"version\": \"$KIBANA_VERSION-$KIBANA_PLUGIN_VERSION-SNAPSHOT\"#" package.json
      sed -i -e "s#\"version\":.*\"#\"version\": \"$KIBANA_VERSION\"#" kibana.json
      ./build.sh install-local
      mv "build/kibana/searchguard-kibana-$KIBANA_VERSION-$KIBANA_PLUGIN_VERSION-SNAPSHOT" "build/kibana/searchguard-kibana-$KIBANA_VERSION-$KIBANA_PLUGIN_VERSION"
      sed -i -e "s/\"version\":\".*\"/\"version\": \"$KIBANA_VERSION-$KIBANA_PLUGIN_VERSION\"/" package.json
      sed -i -e "s#\"version\":.*\"#\"version\": \"$KIBANA_VERSION-$KIBANA_PLUGIN_VERSION\"#" package.json
      sed -i -e "s#\"version\":.*\"#\"version\": \"$KIBANA_VERSION-$KIBANA_PLUGIN_VERSION\"#" "build/kibana/searchguard-kibana-$KIBANA_VERSION-$KIBANA_PLUGIN_VERSION/package.json"
  interruptible: true
  rules:
    - if: '$CI_COMMIT_TAG =~ /^sg-.*/'
  artifacts:
    when: always
    paths:
      - "build.log"
      - "build/kibana/*"
    expire_in: 24h


deploy_snapshot:
  stage: package
  tags:
    - openstack-runner
  script:
    - |
      KIBANA_VERSION=$(cat package.json | jq --raw-output '.version' | cut -d "-" -f1) && echo KIBANA_VERSION="${KIBANA_VERSION}" >> environment.env
      KIBANA_PLUGIN_VERSION=$(cat package.json | jq --raw-output '.version' | cut -d'-' -f2) && echo KI_PLUGIN_VERSION="${KIBANA_PLUGIN_VERSION}"  >> environment.env
      MAJOR=$(echo $KIBANA_VERSION | cut -d. -f1-2)  && echo MAJOR="${MAJOR}"  >> environment.env

      echo "Deploying snapshot: $KIBANA_VERSION-$KIBANA_PLUGIN_VERSION-SNAPSHOT"
      mvn clean deploy -s settings.xml -Drevision="$KIBANA_VERSION-$KIBANA_PLUGIN_VERSION-SNAPSHOT" | tee deploy.out

      KI_SNAPSHOT=$(grep -E "Uploaded to .*: https://.*/search-guard-kibana-plugin-.*[0-9]+.zip " deploy.out| grep -o 'http.*zip')
      echo "Debug: KI_SNAPSHOT is ${KI_SNAPSHOT}"
      echo KI_SNAPSHOT="${KI_SNAPSHOT}"  >> environment.env

      [[ -n $ES_TEST_VERSION ]] && echo ES_VERSION="${ES_TEST_VERSION}"  >> environment.env || echo ES_VERSION="${KIBANA_VERSION}"  >> environment.env

      [[ -n "$SG_PLUGIN_TEST_VERSION" ]] && SG_PLUGIN_VERSION=${SG_PLUGIN_TEST_VERSION} || SG_PLUGIN_VERSION=${KIBANA_PLUGIN_VERSION}
      echo SG_VERSION="${SG_PLUGIN_VERSION}"  >> environment.env
      RELEASE_SG_PLUGIN_ID=$(curl -Ss --fail "https://maven.search-guard.com/api/search/gavc?g=com.floragunn&a=search-guard-suite-plugin&v=$SG_PLUGIN_VERSION&repos=search-guard-suite-release"| grep zip|grep -v sgadmin|sed -E "s/(.*)\/(.*).zip(.*)/\2/"|sort|uniq|tail -n 1) || true
      [[ -n $RELEASE_SG_PLUGIN_ID ]] && echo SG_SNAPSHOT="https://maven.search-guard.com/artifactory/search-guard-suite-release/com/floragunn/search-guard-suite-plugin/$SG_PLUGIN_VERSION/$RELEASE_SG_PLUGIN_ID.zip"  >> environment.env
      [[ -z $RELEASE_SG_PLUGIN_ID ]] && SNAPSHOT_SG_PLUGIN_ID=$(curl -Ss --fail "https://maven.search-guard.com/api/search/gavc?g=com.floragunn&a=search-guard-suite-plugin&v=$SG_PLUGIN_VERSION&repos=search-guard-suite-snapshot"| grep zip|grep -v sgadmin|sed -E "s/(.*)\/(.*).zip(.*)/\2/"|sort|uniq|tail -n 1) || true
      [[ -n $SNAPSHOT_SG_PLUGIN_ID ]] && echo SG_SNAPSHOT="https://maven.search-guard.com/artifactory/search-guard-suite-snapshot/com/floragunn/search-guard-suite-plugin/$SG_PLUGIN_VERSION/$SNAPSHOT_SG_PLUGIN_ID.zip" >> environment.env


      [[ -n $SGADMIN_PLUGIN_TEST_VERSION ]] && SGADMIN_PLUGIN_VERSION=${SGADMIN_PLUGIN_TEST_VERSION} || SGADMIN_PLUGIN_VERSION=${SG_PLUGIN_VERSION}
      RELEASE_SGADMIN_PLUGIN_ID=$(curl -Ss --fail "https://maven.search-guard.com/api/search/gavc?g=com.floragunn&a=search-guard-suite-plugin&v=$SGADMIN_PLUGIN_VERSION&repos=search-guard-suite-release"| grep zip|grep sgadmin|sed -E "s/(.*)\/(.*).zip(.*)/\2/"|sort|uniq|tail -n 1) || true
      [[ -n $RELEASE_SGADMIN_PLUGIN_ID ]] && echo SGADMIN_SNAPSHOT="https://maven.search-guard.com/artifactory/search-guard-suite-release/com/floragunn/search-guard-suite-plugin/$SGADMIN_PLUGIN_VERSION/$RELEASE_SGADMIN_PLUGIN_ID.zip"  >> environment.env
      [[ -z $RELEASE_SGADMIN_PLUGIN_ID ]] && SNAPSHOT_SGADMIN_PLUGIN_ID=$(curl -Ss --fail "https://maven.search-guard.com/api/search/gavc?g=com.floragunn&a=search-guard-suite-plugin&v=$SGADMIN_PLUGIN_VERSION&repos=search-guard-suite-snapshot"| grep zip|grep sgadmin|sed -E "s/(.*)\/(.*).zip(.*)/\2/"|sort|uniq|tail -n 1) || true
      [[ -n $SNAPSHOT_SGADMIN_PLUGIN_ID ]] && echo SGADMIN_SNAPSHOT="https://maven.search-guard.com/artifactory/search-guard-suite-snapshot/com/floragunn/search-guard-suite-plugin/$SGADMIN_PLUGIN_VERSION/$SNAPSHOT_SGADMIN_PLUGIN_ID.zip" >> environment.env



      if [[ -n $KIBANA_TEST_BRANCH ]];  then
        KI_URL=local
        echo "Building Kibana package for $KIBANA_APP_BRANCH. Please, be patient"
        ./build.sh build-kibana
        mkdir -p components/search-guard-kibana-plugin/ && cp build_stage/kibana/target/kibana-linux-x86_64.tar.gz components/search-guard-kibana-plugin/
      else
        KI_URL="https://artifacts.elastic.co/downloads/kibana/kibana-$KIBANA_VERSION-linux-x86_64.tar.gz"
        echo "Debug: KI_URL=$KI_URL"
      fi
      echo KI_URL="${KI_URL}"  >> environment.env

      echo "BASEIMAGE=0.9.3-open-jdk-11" >> environment.env
      echo "SG_SOURCE=snapshot" >> environment.env
      echo "TCNATIVE_SOURCE=download" >> environment.env
      echo "TCNATIVE_URL=https://maven.search-guard.com/netty-tcnative/netty-tcnative-openssl-1.1.1c-static-2.0.25.Final-non-fedora-linux-x86_64.jar" >> environment.env
      echo "KI_SOURCE=snapshot" >> environment.env
  needs:
    - job: unit_tests
      artifacts: true
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" || $CI_PIPELINE_SOURCE == "schedule"'
    - if: '$CI_COMMIT_TAG =~ /^sg-.*/'
      when: never
  artifacts:
    when: always
    paths:
      - components/search-guard-kibana-plugin/kibana-linux-x86_64.tar.gz
      - deploy.out
      - environment.env
    expire_in: 7 days
    reports:
      dotenv: environment.env


deploy_staging:
  stage: package
  tags:
    - openstack-runner
  script:
    - |
      ./dev/setup_gpg.sh || true
      KIBANA_VERSION=$(echo $CI_COMMIT_TAG | cut -d- -f4) && echo KIBANA_VERSION="${KIBANA_VERSION}" >> environment.env
      KIBANA_PLUGIN_VERSION=$(echo $CI_COMMIT_TAG | cut -d- -f2|cut -d. -f2-)'.0' && echo KI_PLUGIN_VERSION="${KIBANA_PLUGIN_VERSION}"  >> environment.env
      MAJOR=$(echo $KIBANA_VERSION | cut -d. -f1-2)  && echo MAJOR="${MAJOR}"  >> environment.env
      echo "Deploying to Staging"
      mvn -B -s settings.xml -Drevision="$KIBANA_VERSION-$KIBANA_PLUGIN_VERSION" -Prelease clean deploy  | tee deploy.out
      KI_SNAPSHOT=$(grep -E "Uploaded to .*: https://.*/search-guard-kibana-plugin-.*[0-9]+.zip " deploy.out| grep -o 'http.*zip')
      echo "Debug: KI_SNAPSHOT is ${KI_SNAPSHOT}"
      echo KI_SNAPSHOT="${KI_SNAPSHOT}"  >> environment.env
      [[ -n $ES_TEST_VERSION ]] && echo ES_VERSION="${ES_TEST_VERSION}"  >> environment.env || echo ES_VERSION="${KIBANA_VERSION}"  >> environment.env

      [[ -n "$SG_PLUGIN_TEST_VERSION" ]] && SG_PLUGIN_VERSION=${SG_PLUGIN_TEST_VERSION} || SG_PLUGIN_VERSION=${KIBANA_PLUGIN_VERSION}
      echo SG_VERSION="${SG_PLUGIN_VERSION}"  >> environment.env
      RELEASE_SG_PLUGIN_ID=$(curl -Ss --fail "https://maven.search-guard.com/api/search/gavc?g=com.floragunn&a=search-guard-suite-plugin&v=$SG_PLUGIN_VERSION&repos=search-guard-suite-release"| grep zip|grep -v sgadmin|sed -E "s/(.*)\/(.*).zip(.*)/\2/"|sort|uniq|tail -n 1) || true
      [[ -n $RELEASE_SG_PLUGIN_ID ]] && echo SG_SNAPSHOT="https://maven.search-guard.com/artifactory/search-guard-suite-release/com/floragunn/search-guard-suite-plugin/$SG_PLUGIN_VERSION/$RELEASE_SG_PLUGIN_ID.zip"  >> environment.env
      [[ -z $RELEASE_SG_PLUGIN_ID ]] && SNAPSHOT_SG_PLUGIN_ID=$(curl -Ss --fail "https://maven.search-guard.com/api/search/gavc?g=com.floragunn&a=search-guard-suite-plugin&v=$SG_PLUGIN_VERSION&repos=search-guard-suite-snapshot"| grep zip|grep -v sgadmin|sed -E "s/(.*)\/(.*).zip(.*)/\2/"|sort|uniq|tail -n 1) || true
      [[ -n $SNAPSHOT_SG_PLUGIN_ID ]] && echo SG_SNAPSHOT="https://maven.search-guard.com/artifactory/search-guard-suite-snapshot/com/floragunn/search-guard-suite-plugin/$SG_PLUGIN_VERSION/$SNAPSHOT_SG_PLUGIN_ID.zip" >> environment.env


      [[ -n $SGADMIN_PLUGIN_TEST_VERSION ]] && SGADMIN_PLUGIN_VERSION=${SGADMIN_PLUGIN_TEST_VERSION} || SGADMIN_PLUGIN_VERSION=${SG_PLUGIN_VERSION}
      RELEASE_SGADMIN_PLUGIN_ID=$(curl -Ss --fail "https://maven.search-guard.com/api/search/gavc?g=com.floragunn&a=search-guard-suite-plugin&v=$SGADMIN_PLUGIN_VERSION&repos=search-guard-suite-release"| grep zip|grep sgadmin|sed -E "s/(.*)\/(.*).zip(.*)/\2/"|sort|uniq|tail -n 1) || true
      [[ -n $RELEASE_SGADMIN_PLUGIN_ID ]] && echo SGADMIN_SNAPSHOT="https://maven.search-guard.com/artifactory/search-guard-suite-release/com/floragunn/search-guard-suite-plugin/$SGADMIN_PLUGIN_VERSION/$RELEASE_SGADMIN_PLUGIN_ID.zip"  >> environment.env
      [[ -z $RELEASE_SGADMIN_PLUGIN_ID ]] && SNAPSHOT_SGADMIN_PLUGIN_ID=$(curl -Ss --fail "https://maven.search-guard.com/api/search/gavc?g=com.floragunn&a=search-guard-suite-plugin&v=$SGADMIN_PLUGIN_VERSION&repos=search-guard-suite-snapshot"| grep zip|grep sgadmin|sed -E "s/(.*)\/(.*).zip(.*)/\2/"|sort|uniq|tail -n 1) || true
      [[ -n $SNAPSHOT_SGADMIN_PLUGIN_ID ]] && echo SGADMIN_SNAPSHOT="https://maven.search-guard.com/artifactory/search-guard-suite-snapshot/com/floragunn/search-guard-suite-plugin/$SGADMIN_PLUGIN_VERSION/$SNAPSHOT_SGADMIN_PLUGIN_ID.zip" >> environment.env

      if [[ -n $KIBANA_TEST_BRANCH ]];  then
        KI_URL=local
        echo "Building Kibana package for $KIBANA_APP_BRANCH. Please, be patient"
        ./build.sh build-kibana
        mkdir -p components/search-guard-kibana-plugin/ && cp build_stage/kibana/target/kibana-linux-x86_64.tar.gz components/search-guard-kibana-plugin/
      else
        KI_URL="https://artifacts.elastic.co/downloads/kibana/kibana-$KIBANA_VERSION-linux-x86_64.tar.gz"
        echo "Debug: KI_URL=$KI_URL"
      fi
      echo KI_URL="${KI_URL}"  >> environment.env

      echo "BASEIMAGE=0.9.3-open-jdk-11" >> environment.env
      echo "SG_SOURCE=snapshot" >> environment.env
      echo "TCNATIVE_SOURCE=download" >> environment.env
      echo "TCNATIVE_URL=https://maven.search-guard.com/netty-tcnative/netty-tcnative-openssl-1.1.1c-static-2.0.25.Final-non-fedora-linux-x86_64.jar" >> environment.env
      echo "KI_SOURCE=staging" >> environment.env

      export BASEIMAGES="$BASEIMAGES"
      export ES_VERSION="$ES_VERSION"

      export TCNATIVE_SOURCE=download
      export TCNATIVE_URL="$TCNATIVE_URL"

      export KI_SOURCE=staging
      export KI_PLUGIN_VERSION="$SG_VERSION"

  needs:
    - job: unit_tests_release
      artifacts: true
  rules:
    - if: '$CI_COMMIT_TAG =~ /^sg-.*/'
  artifacts:
    when: always
    paths:
      - components/search-guard-kibana-plugin/kibana-linux-x86_64.tar.gz
      - deploy.out
      - environment.env
    expire_in: 7 days
    reports:
      dotenv: environment.env


include:
  - '.gitlab-ci-branch-specific.yml'
  - project: 'private/search-guard-integration-tests'
    ref: 7.13.x
    file: 'ci-tools/ci-jobs-configuration/config_kibana_basicauth.yml'
  - project: 'private/search-guard-integration-tests'
    ref: 7.13.x
    file: 'ci-tools/ci-jobs-configuration/config_kibana_multitenancy.yml'
  - project: 'private/search-guard-integration-tests'
    ref: 7.13.x
    file: 'ci-tools/ci-jobs-configuration/config_kibana_configui.yml'
  - project: 'private/search-guard-integration-tests'
    ref: 7.13.x
    file: 'ci-tools/ci-jobs-configuration/config_kibana_sso.yml'
  - project: 'private/search-guard-integration-tests'
    ref: 7.13.x
    file: 'ci-tools/ci-jobs-configuration/config_kibana_impersonation.yml'
  - project: 'private/search-guard-integration-tests'
    ref: 7.13.x
    file: 'ci-tools/ci-jobs-configuration/config_kibana_clientcert.yml'
  - project: 'private/search-guard-integration-tests'
    ref: 7.13.x
    file: 'ci-tools/ci-jobs-configuration/config_kibana_signals.yml'
  - project: 'private/search-guard-integration-tests'
    ref: 7.13.x
    file: 'ci-tools/ci-jobs-configuration/config_kibana_authtokens.yml'
  - project: 'private/search-guard-integration-tests'
    ref: 7.13.x
    file: 'ci-tools/ci-jobs-configuration/config_kibana_anonymous_user.yml'

deploy_release:
  stage: release
  interruptible: true
  rules:
    - if: '$CI_COMMIT_TAG =~ /^sg-.*/'
  before_script:
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan git.floragunn.com >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  tags:
    - openstack-runner
  script:
    - |
      export MAVEN_HOME=/opt/apache-maven
      ./dev/setup_gpg.sh || true
      export KIBANA_VERSION=$(echo $CI_COMMIT_TAG | cut -d- -f4)
      export KIBANA_PLUGIN_VERSION=$(echo $CI_COMMIT_TAG | cut -d- -f2|cut -d. -f2-)'.0'
      export MAJOR=$(echo $KIBANA_VERSION | cut -d. -f1-2)

      echo "KIBANA_PLUGIN_VERSION is $KIBANA_PLUGIN_VERSION and KIBANA_VERSION is $KIBANA_VERSION"

      echo "Removing current release from Staging"
      curl -u "$ARTIFACTORY_USER:$ARTIFACTORY_PASSWORD" -X DELETE "https://maven.search-guard.com/artifactory/search-guard-kibana-plugin-staging/com/floragunn/search-guard-kibana-plugin/$KIBANA_VERSION-$KIBANA_PLUGIN_VERSION" || true

      cd search-guard-integration-tests
      git clone git@git.floragunn.com:private/search-guard-integration-tests.git
      cd search-guard-integration-tests
      if [ "$CI_COMMIT_TAG" != "master" ]; then
        it_branch_exists=$(git show-ref $CI_COMMIT_TAG||true)
       fi
       if [ -n "$it_branch_exists" ]; then
         IT_BRANCH="$CI_COMMIT_TAG"
       else
         IT_BRANCH="$MAJOR.x"
       fi
       git checkout "$IT_BRANCH"

      git tag "kibana-$CI_COMMIT_TAG" || true

      echo "Tag created in int repo"
      git show-ref "kibana-$CI_COMMIT_TAG"
      git push --tags || true
      cd
      echo "Deploying Release to Production repo"
      cd $CI_PROJECT_DIR
      $MAVEN_HOME/bin/mvn -B -s settings.xml -Drelease=true -Drevision="$KIBANA_VERSION-$KIBANA_PLUGIN_VERSION" clean deploy
