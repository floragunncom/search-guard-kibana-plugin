variables:
  SG_JAVA_BUILD_VERSION: "8"

image: circleci/openjdk:${SG_JAVA_BUILD_VERSION}-jdk-browsers

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - ./node_modules/



before_script:
  - |
    curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh| bash
    export NVM_HOME=~/.nvm
    export NVM_DIR="$HOME/.nvm"
    [ -s "$NVM_DIR/nvm.sh" ]; \. "$NVM_DIR/nvm.sh"
    export MAVEN_HOME=/opt/apache-maven
    PACKAGE_VERSION=$(cat package.json | jq --raw-output '.version') && echo "PACKAGE_VERSION: $PACKAGE_VERSION"
    ES_VERSION=$(echo $PACKAGE_VERSION | cut -d'-' -f1) && echo "ES_VERSION: $ES_VERSION"
    PLUGIN_VERSION=$(echo $PACKAGE_VERSION | cut -d'-' -f2) && echo "PLUGIN_VERSION: $PLUGIN_VERSION"
    SNAPSHOT=$(echo $PACKAGE_VERSION | cut -d'-' -f3) && echo "SNAPSHOT: $SNAPSHOT"

stages:
  - build


unittest_and_build:
  stage: build
  script:
    - if [ "$SNAPSHOT" == "SNAPSHOT" ]; then ./build.sh deploy-snapshot-maven; else echo "Can only deploy SNAPSHOT versions" && exit -1; fi
  except:
    - merge_requests
  artifacts:
    when: always
    paths:
      - build.log
    expire_in: 30 days
  only:
    variables:
      - $CI_JOB == null || $CI_JOB == ""

kibana_build:
  stage: build
  script:
    - ./build.sh build-kibana
  except:
    - merge_requests
  only:
    variables:
      - $CI_JOB == "build_kibana"
  artifacts:
    when: always
    paths:
      - "build.log"
      - "build/kibana/*"
    expire_in: 24h


deploy_snapshot:
  stage: package
  tags:
    - openstack-runner
  script:
    - |
      KIBANA_VERSION=$(cat package.json | jq --raw-output '.version' | cut -d "-" -f1) && echo KIBANA_VERSION="${KIBANA_VERSION}" >> environment.env
      KIBANA_PLUGIN_VERSION=b-$CI_COMMIT_REF_NAME-SNAPSHOT
      echo KI_PLUGIN_VERSION="${KIBANA_PLUGIN_VERSION}"  >> environment.env
      MAJOR=$(echo $KIBANA_VERSION | cut -d. -f1-2)  && echo MAJOR="${MAJOR}"  >> environment.env

      echo "Deploying snapshot: $KIBANA_VERSION-$KIBANA_PLUGIN_VERSION-SNAPSHOT"
      mvn clean deploy -s settings.xml -Drevision="$KIBANA_PLUGIN_VERSION" | tee deploy.out

      KI_SNAPSHOT=$(grep -E "Uploaded to .*: https://.*/search-guard-kibana-plugin-.*[0-9]+.zip " deploy.out| grep -o 'http.*zip')
      echo "Debug: KI_SNAPSHOT is ${KI_SNAPSHOT}"
      echo KI_SNAPSHOT="${KI_SNAPSHOT}"  >> environment.env

      [[ -n $ES_TEST_VERSION ]] && echo ES_VERSION="${ES_TEST_VERSION}"  >> environment.env || echo ES_VERSION="${KIBANA_VERSION}"  >> environment.env

      [[ -n "$SG_PLUGIN_TEST_VERSION" ]] && SG_PLUGIN_VERSION=${SG_PLUGIN_TEST_VERSION} || SG_PLUGIN_VERSION=${KIBANA_PLUGIN_VERSION}
      echo SG_VERSION="${SG_PLUGIN_VERSION}"  >> environment.env
      RELEASE_SG_PLUGIN_ID=$(curl -Ss --fail "https://maven.search-guard.com/api/search/gavc?g=com.floragunn&a=search-guard-suite-plugin&v=$SG_PLUGIN_VERSION&repos=search-guard-suite-release"| grep zip|grep -v sgadmin|sed -E "s/(.*)\/(.*).zip(.*)/\2/"|sort|uniq|tail -n 1) || true
      [[ -n $RELEASE_SG_PLUGIN_ID ]] && echo SG_SNAPSHOT="https://maven.search-guard.com/artifactory/search-guard-suite-release/com/floragunn/search-guard-suite-plugin/$SG_PLUGIN_VERSION/$RELEASE_SG_PLUGIN_ID.zip"  >> environment.env
      [[ -z $RELEASE_SG_PLUGIN_ID ]] && SNAPSHOT_SG_PLUGIN_ID=$(curl -Ss --fail "https://maven.search-guard.com/api/search/gavc?g=com.floragunn&a=search-guard-suite-plugin&v=$SG_PLUGIN_VERSION&repos=search-guard-suite-snapshot"| grep zip|grep -v sgadmin|sed -E "s/(.*)\/(.*).zip(.*)/\2/"|sort|uniq|tail -n 1) || true
      [[ -n $SNAPSHOT_SG_PLUGIN_ID ]] && echo SG_SNAPSHOT="https://maven.search-guard.com/artifactory/search-guard-suite-snapshot/com/floragunn/search-guard-suite-plugin/$SG_PLUGIN_VERSION/$SNAPSHOT_SG_PLUGIN_ID.zip" >> environment.env


      [[ -n $SGADMIN_PLUGIN_TEST_VERSION ]] && SGADMIN_PLUGIN_VERSION=${SGADMIN_PLUGIN_TEST_VERSION} || SGADMIN_PLUGIN_VERSION=${SG_PLUGIN_VERSION}
      RELEASE_SGADMIN_PLUGIN_ID=$(curl -Ss --fail "https://maven.search-guard.com/api/search/gavc?g=com.floragunn&a=search-guard-suite-plugin&v=$SGADMIN_PLUGIN_VERSION&repos=search-guard-suite-release"| grep zip|grep sgadmin|sed -E "s/(.*)\/(.*).zip(.*)/\2/"|sort|uniq|tail -n 1) || true
      [[ -n $RELEASE_SGADMIN_PLUGIN_ID ]] && echo SGADMIN_SNAPSHOT="https://maven.search-guard.com/artifactory/search-guard-suite-release/com/floragunn/search-guard-suite-plugin/$SGADMIN_PLUGIN_VERSION/$RELEASE_SGADMIN_PLUGIN_ID.zip"  >> environment.env
      [[ -z $RELEASE_SGADMIN_PLUGIN_ID ]] && SNAPSHOT_SGADMIN_PLUGIN_ID=$(curl -Ss --fail "https://maven.search-guard.com/api/search/gavc?g=com.floragunn&a=search-guard-suite-plugin&v=$SGADMIN_PLUGIN_VERSION&repos=search-guard-suite-snapshot"| grep zip|grep sgadmin|sed -E "s/(.*)\/(.*).zip(.*)/\2/"|sort|uniq|tail -n 1) || true
      [[ -n $SNAPSHOT_SGADMIN_PLUGIN_ID ]] && echo SGADMIN_SNAPSHOT="https://maven.search-guard.com/artifactory/search-guard-suite-snapshot/com/floragunn/search-guard-suite-plugin/$SGADMIN_PLUGIN_VERSION/$SNAPSHOT_SGADMIN_PLUGIN_ID.zip" >> environment.env



      if [[ -n $KIBANA_TEST_BRANCH ]];  then
        KI_URL=local
        echo "Building Kibana package for $KIBANA_APP_BRANCH. Please, be patient"
        ./build.sh build-kibana
        mkdir -p components/search-guard-kibana-plugin/ && cp build_stage/kibana/target/kibana-linux-x86_64.tar.gz components/search-guard-kibana-plugin/
      else
        KI_URL="https://artifacts.elastic.co/downloads/kibana/kibana-$KIBANA_VERSION-linux-x86_64.tar.gz"
        echo "Debug: KI_URL=$KI_URL"
      fi
      echo KI_URL="${KI_URL}"  >> environment.env

      echo "BASEIMAGE=0.9.3-open-jdk-11" >> environment.env
      echo "SG_SOURCE=snapshot" >> environment.env
      echo "TCNATIVE_SOURCE=download" >> environment.env
      echo "TCNATIVE_URL=https://maven.search-guard.com/netty-tcnative/netty-tcnative-openssl-1.1.1c-static-2.0.25.Final-non-fedora-linux-x86_64.jar" >> environment.env
      echo "KI_SOURCE=snapshot" >> environment.env
  needs:
    - job: unit_tests
      artifacts: true
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" || $CI_PIPELINE_SOURCE == "schedule"'
    - if: '$CI_COMMIT_TAG =~ /^sg-.*/'
      when: never
  artifacts:
    when: always
    paths:
      - components/search-guard-kibana-plugin/kibana-linux-x86_64.tar.gz
      - deploy.out
      - environment.env
    expire_in: 7 days

unit_build_and_int_tests:
  stage: build
  script:
    - |
       sg_release=$(curl -Ss -F "token=$SG_RELEASE_TOKEN" -F "variables[MERGE_ACTION]=true" -F "variables[KIBANA_BUILD]=true" -F "variables[KIBANA_BRANCH]=$CI_COMMIT_REF_NAME" -F "variables[SG_CIRCLE_JOB]=kibanabuild" -F "ref=master" "https://git.floragunn.com/api/v4/projects/7/trigger/pipeline" --fail)
       sg_release_buildnum=$(jq --raw-output '.id' <<< $sg_release )
       echo "Executing build and integration tests in scope of https://git.floragunn.com/floragunncom/devops/release-support/pipelines/$sg_release_buildnum"
       while true
       do
         sleep 30
         sg_release_status=$(curl -Ss --header "PRIVATE-TOKEN: $CIRUNNER_TOKEN" "https://git.floragunn.com/api/v4/projects/7/pipelines/$sg_release_buildnum" | jq --raw-output '.status')

         echo "Build and Integration tests status: $sg_release_status"

         if [ "$sg_release_status" == "canceled" ] || [ "$sg_release_status" == "failed" ] || [ "$sg_release_status" == "skipped" ]; then
           echo "Kibana Build and Integration tests failed. Check the reason here: https://git.floragunn.com/floragunncom/devops/release-support/pipelines/$sg_release_buildnum"
           exit 1
         fi

         if [ "$sg_release_status" == "success" ]; then
          echo "Kibana Build and Integration tests succeeded"
          exit
         fi
        done
  only:
    - merge_requests
  artifacts:
    when: always
    paths:
      - build.log
    expire_in: 30 days
