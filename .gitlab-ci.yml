variables:
  SG_JAVA_BUILD_VERSION: "8"

image: circleci/openjdk:${SG_JAVA_BUILD_VERSION}-jdk-browsers

#cache:
#  key: ${CI_COMMIT_REF_SLUG}
#  paths:
#    - ./node_modules/
#    - ./build_stage/kibana/node_modules/

workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
      when: never
    - when: always


stages:
  - build
  - package
  - "Frontend Int Tests Core"
  - "Frontend Int Tests Features"
  - "Frontend Int Tests External Features"
  - release

#This case is for usual commit to the branch, doing only unit testing and local build
unit_tests:
  stage: build
  tags:
    - openstack-runner
  rules:
    - if: '$CI_COMMIT_TAG =~ /^sg-.*/'
      when: never
    - when: always
  before_script:
    - |
      curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh| bash
      export NVM_HOME=~/.nvm
      export NVM_DIR="$HOME/.nvm"
      [ -s "$NVM_DIR/nvm.sh" ]; \. "$NVM_DIR/nvm.sh"
      export MAVEN_HOME=/opt/apache-maven
  script:
    - ./build.sh build
  interruptible: true
  artifacts:
    when: always
    paths:
      - "build.log"
      - "build/opensearch-dashboards/*"
    expire_in: 24h

#This case is for release tag commit to the branch, doing only unit testing and local build
unit_tests_release:
  stage: build
  tags:
    - openstack-runner
  before_script:
    - |
      curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh| bash
      export NVM_HOME=~/.nvm
      export NVM_DIR="$HOME/.nvm"
      [ -s "$NVM_DIR/nvm.sh" ]; \. "$NVM_DIR/nvm.sh"
      export MAVEN_HOME=/opt/apache-maven
  script:
    - |
      export KIBANA_VERSION=$(echo $CI_COMMIT_TAG | cut -d- -f4)
      export KIBANA_PLUGIN_VERSION=$(echo $CI_COMMIT_TAG | cut -d- -f2|cut -d. -f2-)'.0'
      sed -i -e "s#\"version\":.*\"#\"version\": \"$KIBANA_VERSION-$KIBANA_PLUGIN_VERSION-SNAPSHOT\"#" package.json
      sed -i -e "s#\"version\":.*\"#\"version\": \"$KIBANA_VERSION\"#" kibana.json
      ./build.sh install-local
      mv "build/kibana/searchguard-kibana-$KIBANA_VERSION-$KIBANA_PLUGIN_VERSION-SNAPSHOT" "build/kibana/searchguard-kibana-$KIBANA_VERSION-$KIBANA_PLUGIN_VERSION"
      sed -i -e "s/\"version\":\".*\"/\"version\": \"$KIBANA_VERSION-$KIBANA_PLUGIN_VERSION\"/" package.json
      sed -i -e "s#\"version\":.*\"#\"version\": \"$KIBANA_VERSION-$KIBANA_PLUGIN_VERSION\"#" package.json
      sed -i -e "s#\"version\":.*\"#\"version\": \"$KIBANA_VERSION-$KIBANA_PLUGIN_VERSION\"#" "build/kibana/searchguard-kibana-$KIBANA_VERSION-$KIBANA_PLUGIN_VERSION/package.json"
  interruptible: true
  rules:
    - if: '$CI_COMMIT_TAG =~ /^sg-.*/'
  artifacts:
    when: always
    paths:
      - "build.log"
      - "build/opensearch-dashboards/*"
    expire_in: 24h


deploy_snapshot:
  stage: package
  interruptible: true
  tags:
    - openstack-runner
  needs:
    - job: unit_tests
      artifacts: true
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" || $CI_PIPELINE_SOURCE == "schedule"'
    - if: '$CI_COMMIT_TAG =~ /^sg-.*/'
      when: never
  script:
    - |
      set -x
      mvn --batch-mode -s settings.xml -Drevision="b-$CI_COMMIT_REF_NAME-SNAPSHOT" clean deploy | tee deploy.out
      SG_KI_PLUGIN=$(grep -E "Uploaded to .*: https://.*/search-guard-kibana-plugin-.*[0-9]+.zip " deploy.out| grep -o 'http.*zip')
      KI_VERSION=$(cat package.json | jq --raw-output '.version' | cut -d "-" -f1)
      MAJOR=$(echo $KI_VERSION | cut -d. -f1-2)
      if [ -z "$IT_BRANCH" ]; then
        if [ "$CI_COMMIT_REF_NAME" != "master" ] && [ -n $(git ls-remote --heads git@git.floragunn.com:private/search-guard-integration-tests.git $CI_COMMIT_REF_NAME) ]; then
          IT_BRANCH="$CI_COMMIT_REF_NAME"
        else
          IT_BRANCH="$MAJOR.x"
        fi
      fi
      if [ -z "$ES_VERSION" ]; then
        ES_VERSION=$KI_VERSION
      fi
      if [[ ! "$SG_ES_PLUGIN" =~ ^https?:.*$ ]]; then
        if [[ "$SG_ES_PLUGIN" =~ .*SNAPSHOT.* ]]; then
          SG_ES_PLUGIN=$(ci/artifact_uri.sh search-guard-suite-snapshot search-guard-suite-plugin $SG_ES_PLUGIN .zip sgadmin-standalone.zip)
          echo "Found: $SG_ES_PLUGIN"
        else
          SG_ES_PLUGIN=$(ci/artifact_uri.sh search-guard-suite-release search-guard-suite-plugin $SG_ES_PLUGIN .zip sgadmin-standalone.zip)
          echo "Found: $SG_ES_PLUGIN"
        fi
      fi	
      if [[ ! "$SG_ADMIN" =~ ^https?:.*$ ]]; then
        if [[ "$SG_ADMIN" =~ .*SNAPSHOT.* ]]; then
          SG_ADMIN=$(ci/artifact_uri.sh search-guard-suite-snapshot search-guard-suite-plugin $SG_ADMIN sgadmin-standalone.zip)
          echo "Found: $SG_ADMIN"
        else
          SG_ADMIN=$(ci/artifact_uri.sh search-guard-suite-release search-guard-suite-plugin $SG_ADMIN sgadmin-standalone.zip)
          echo "Found: $SG_ADMIN"
        fi
      fi	
      echo "SG_ES_PLUGIN=$SG_ES_PLUGIN" >> build.env
      echo "SG_ADMIN=$SG_ADMIN" >> build.env
      echo "ES_VERSION=$ES_VERSION" >>build.env
      echo "SG_KI_PLUGIN=$SG_KI_PLUGIN" >>build.env
      echo "KI_VERSION=$KI_VERSION" >>build.env
      echo "IT_BRANCH=$IT_BRANCH" >>build.env
      cat build.env
  artifacts:
    when: always
    expire_in: 7 days
    reports:
      dotenv: build.env


deploy_staging:
  stage: package
  tags:
    - openstack-runner
  script:
    - |
      ./dev/setup_gpg.sh || true
      KI_VERSION=$(echo $CI_COMMIT_TAG | cut -d- -f4) 
      SG_KI_PLUGIN_VERSION=$(echo $CI_COMMIT_TAG | cut -d- -f2|cut -d. -f2-)'.0'
      mvn --batch-mode -s settings.xml -Drevision="$KI_VERSION-$SG_KI_PLUGIN_VERSION" -Prelease clean deploy | tee deploy.out
      SG_KI_PLUGIN=$(grep -E "Uploaded to .*: https://.*/search-guard-kibana-plugin-.*[0-9]+.zip " deploy.out| grep -o 'http.*zip')
      MAJOR=$(echo $KI_VERSION | cut -d. -f1-2)
      if [ -z "$IT_BRANCH" ]; then
        if [ "$CI_COMMIT_REF_NAME" != "master" ] && [ -n $(git ls-remote --heads git@git.floragunn.com:private/search-guard-integration-tests.git $CI_COMMIT_REF_NAME) ]; then
          IT_BRANCH="$CI_COMMIT_REF_NAME"
        else
          IT_BRANCH="$MAJOR.x"
        fi
      fi
      if [ -z "$ES_VERSION" ]; then
        ES_VERSION=$KI_VERSION
      fi
      if [[ ! "$SG_ES_PLUGIN" =~ ^https?:.*$ ]]; then
        if [[ "$SG_ES_PLUGIN" =~ .*SNAPSHOT.* ]]; then
          SG_ES_PLUGIN_FILE=$(curl -Ss --fail "https://maven.search-guard.com/api/search/gavc?g=com.floragunn&a=search-guard-suite-plugin&v=$SG_ES_PLUGIN&repos=search-guard-suite-snapshot"| grep zip|grep -v sgadmin||sed -E "s/(.*)\/(.*).zip(.*)/\2/"|sort|uniq|tail -n 1) 
          SG_ES_PLUGIN=https://maven.search-guard.com/artifactory/search-guard-suite-snapshot/com/floragunn/search-guard-suite-plugin/$SG_ES_PLUGIN/$SG_ES_PLUGIN_FILE.zip
          echo "Found: $SG_ES_PLUGIN"
        else
          SG_ES_PLUGIN_FILE=$(curl -Ss --fail "https://maven.search-guard.com/api/search/gavc?g=com.floragunn&a=search-guard-suite-plugin&v=$SG_ES_PLUGIN&repos=search-guard-suite-release"| grep zip|grep -v sgadmin||sed -E "s/(.*)\/(.*).zip(.*)/\2/"|sort|uniq|tail -n 1) 
          SG_ES_PLUGIN=https://maven.search-guard.com/artifactory/search-guard-suite-release/com/floragunn/search-guard-suite-plugin/$SG_ES_PLUGIN/$SG_ES_PLUGIN_FILE.zip
          echo "Found: $SG_ES_PLUGIN"
        fi
      fi	
      if [[ ! "$SG_ADMIN" =~ ^https?:.*$ ]]; then
        if [[ "$SG_ADMIN" =~ .*SNAPSHOT.* ]]; then
          SG_ADMIN_FILE=$(curl -Ss --fail "https://maven.search-guard.com/api/search/gavc?g=com.floragunn&a=search-guard-suite-plugin&v=$SG_ADMIN&repos=search-guard-suite-snapshot"| grep zip|grep sgadmin|sed -E "s/(.*)\/(.*).zip(.*)/\2/"|sort|uniq|tail -n 1) 
          SG_ADMIN=https://maven.search-guard.com/artifactory/search-guard-suite-snapshot/com/floragunn/search-guard-suite-plugin/$SG_ADMIN/$SG_ADMIN_FILE.zip
          echo "Found: $SG_ADMIN"
        else
          SG_ADMIN_FILE=$(curl -Ss --fail "https://maven.search-guard.com/api/search/gavc?g=com.floragunn&a=search-guard-suite-plugin&v=$SG_ES_PLUGIN&repos=search-guard-suite-release"| grep zip|grep sgadmin|sed -E "s/(.*)\/(.*).zip(.*)/\2/"|sort|uniq|tail -n 1) 
          SG_ADMIN=https://maven.search-guard.com/artifactory/search-guard-suite-release/com/floragunn/search-guard-suite-plugin/$SG_ADMIN/$SG_ADMIN_FILE.zip
          echo "Found: $SG_ADMIN"
        fi
      fi	

      echo "SG_ES_PLUGIN=$SG_ES_PLUGIN" >> build.env
      echo "SG_ADMIN=$SG_ADMIN" >> build.env
      echo "ES_VERSION=$ES_VERSION" >>build.env
      echo "SG_KI_PLUGIN=$SG_KI_PLUGIN" >>build.env
      echo "KI_VERSION=$KI_VERSION" >>build.env
      echo "IT_BRANCH=$IT_BRANCH" >>build.env
      cat build.env

  needs:
    - job: unit_tests_release
      artifacts: true
  rules:
    - if: '$CI_COMMIT_TAG =~ /^sg-.*/'
  artifacts:
    when: always
    expire_in: 7 days
    reports:
      dotenv: build.env


include:
  - local: '.gitlab-ci-branch-specific.yml'
  - local: 'ci/frontend-int-tests.yml'
  - local: 'ci/frontend-int-tests-features.yml'
  - local: 'ci/frontend-int-tests-external-features.yml'

deploy_release:
  stage: release
  interruptible: true
  rules:
    - if: '$CI_COMMIT_TAG =~ /^sg-.*/'
  before_script:
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan git.floragunn.com >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  tags:
    - openstack-runner
  script:
    - |
      export MAVEN_HOME=/opt/apache-maven
      ./dev/setup_gpg.sh || true
      export KIBANA_VERSION=$(echo $CI_COMMIT_TAG | cut -d- -f4)
      export KIBANA_PLUGIN_VERSION=$(echo $CI_COMMIT_TAG | cut -d- -f2|cut -d. -f2-)'.0'
      export MAJOR=$(echo $KIBANA_VERSION | cut -d. -f1-2)

      echo "KIBANA_PLUGIN_VERSION is $KIBANA_PLUGIN_VERSION and KIBANA_VERSION is $KIBANA_VERSION"

      echo "Removing current release from Staging"
      curl -u "$ARTIFACTORY_USER:$ARTIFACTORY_PASSWORD" -X DELETE "https://maven.search-guard.com/artifactory/search-guard-kibana-plugin-staging/com/floragunn/search-guard-kibana-plugin/$KIBANA_VERSION-$KIBANA_PLUGIN_VERSION" || true

      cd search-guard-integration-tests
      git clone git@git.floragunn.com:private/search-guard-integration-tests.git
      cd search-guard-integration-tests
      if [ "$CI_COMMIT_TAG" != "master" ]; then
        it_branch_exists=$(git show-ref $CI_COMMIT_TAG||true)
       fi
       if [ -n "$it_branch_exists" ]; then
         IT_BRANCH="$CI_COMMIT_TAG"
       else
         IT_BRANCH="$MAJOR.x"
       fi
       git checkout "$IT_BRANCH"

      git tag "kibana-$CI_COMMIT_TAG" || true

      echo "Tag created in int repo"
      git show-ref "kibana-$CI_COMMIT_TAG"
      git push --tags || true
      cd
      echo "Deploying Release to Production repo"
      cd $CI_PROJECT_DIR
      $MAVEN_HOME/bin/mvn -B -s settings.xml -Drelease=true -Drevision="$KIBANA_VERSION-$KIBANA_PLUGIN_VERSION" clean deploy
