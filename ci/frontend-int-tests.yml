
fe_anon_user:
  extends:
  - .fe_integration_test
  variables:
    TEST: "kibana_anonymous_user"
    TEST_ENVIRONMENT: "kibana_anonymous_user"
    TEST_COMPOSEFILE: "docker-compose-kibana-anonymous_user.yml"
    TEST_OSD_CONFIG: "anonymous_user"

fe_basicauth:
  extends:
  - .fe_integration_test
  variables:
    TEST: "kibana_basicauth"
    TEST_ENVIRONMENT: "kibana_noxpack"
    TEST_OSD_CONFIG: "basicauth"

fe_basicauth_basepath:
  extends:
  - .fe_integration_test
  variables:
    TEST: "kibana_basicauth_basepath"
    TEST_ENVIRONMENT: "kibana_noxpack"
    TEST_OSD_CONFIG: "basicauth_basepath"

fe_basicauth_no_mt:
  extends:
  - .fe_integration_test
  variables:
    TEST: "kibana_basicauth_multitenancy_disabled"
    TEST_ENVIRONMENT: "kibana_noxpack"
    TEST_OSD_CONFIG: "basicauth_multitenancy_disabled"

fe_clientcert_basepath:
  extends:
  - .fe_integration_test
  variables:
    TEST: "kibana_clientcert_basepath"
    TEST_ENVIRONMENT: "kibana_xpack_clientcert"
    TEST_OSD_CONFIG: "clientcert"

fe_multitenancy:
  extends:
  - .fe_integration_test
  variables:
    TEST: "kibana_basicauth_multitenancy"
    TEST_ENVIRONMENT: "kibana_noxpack"
    TEST_OSD_CONFIG: "basicauth"

fe_openid_keycloak:
  extends:
    - .fe_integration_test
  variables:
    TEST: "kibana_openid_keycloak"
    TEST_ENVIRONMENT: "kibana_noxpack_openid"
    TEST_OSD_CONFIG: "openid_keycloak"

fe_openid_keycloak_non_default:
  extends:
    - .fe_integration_test
  variables:
    TEST: "kibana_openid_keycloak_non_default"
    TEST_ENVIRONMENT: "kibana_noxpack_openid"
    TEST_OSD_CONFIG: "openid_keycloak_non_default"

fe_saml_keycloak:
  extends:
    - .fe_integration_test
  variables:
    TEST: "kibana_saml_keycloak"
    TEST_ENVIRONMENT: "kibana_noxpack"
    TEST_OSD_CONFIG: "saml"

fe_sso_proxy:
  extends:
  - .fe_integration_test
  variables:
    TEST: "kibana_sso_proxy"
    TEST_ENVIRONMENT: "kibana_noxpack"
    TEST_OSD_CONFIG: "sso_proxy"

fe_sso_jwt_header:
  extends:
  - .fe_integration_test
  variables:
    TEST: "kibana_sso_jwt_header"
    TEST_ENVIRONMENT: "kibana_noxpack"
    TEST_OSD_CONFIG: "sso_jwt"

fe_sso_jwt_param:
  extends:
  - .fe_integration_test
  variables:
    TEST: "kibana_sso_jwt_param"
    TEST_ENVIRONMENT: "kibana_noxpack"
    TEST_OSD_CONFIG: "sso_jwt"

fe_kerberos:
  extends:
  - .fe_integration_test
  variables:
    TEST: "kibana_kerberos"
    TEST_ENVIRONMENT: "kibana_xpack"
    TEST_OSD_CONFIG: "kerberos"

# -------------------------------------------------------------------------

.fe_integration_test:
  stage: "Frontend Int Tests Core"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: on_success
    - if: '$CI_COMMIT_TAG =~ /^sp-.*/'
      when: on_success
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
  variables:
    TEST: "«TBD»"
    TEST_ENVIRONMENT: "default"
    TEST_COMPOSEFILE: "docker-compose-kibana.yml"
    TEST_OSD_CONFIG: "default"
    TEST_OS_PLUGIN: "$OS_PLUGIN"
    TEST_OS_VERSION: "$OS_VERSION"
    TEST_OSD_PLUGIN: "$OSD_PLUGIN"
    TEST_OSD_VERSION: "$KI_VERSION"
    TEST_IT_BRANCH: "$IT_BRANCH"
  image: floragunncom/ci-docker-compose-openjdk11:19.03.1
  before_script:
    - sudo sysctl -w vm.max_map_count=262144
    - docker-compose --version
    - apk update
    - apk add jq curl zip  openssh-client
    - apk add python python-dev python py3-setuptools py-pip git
    - pip install awscli --upgrade || true
  services:
    - docker:19.03-dind
  tags:
    - test-large
  script:
    - |
       echo "============================================="
       echo "TEST_IT_BRANCH: $TEST_IT_BRANCH"
       echo "TEST_OS_PLUGIN: $TEST_OS_PLUGIN"
       echo "TEST_OS_VERSION: $TEST_OS_VERSION"
       echo "TEST_OSD_PLUGIN: $TEST_OSD_PLUGIN"
       echo "TEST_OSD_VERSION: $TEST_OSD_VERSION"
       echo "============================================="
       if [[ "$TEST_OSD_PLUGIN" =~ .*staging.* ]]; then
         echo "export KI_SOURCE=staging" >> $CI_PROJECT_DIR/environment.env
       else
         echo "export KI_SOURCE=snapshot" >> $CI_PROJECT_DIR/environment.env
       fi
       if [[ ! "$TEST_OSD_PLUGIN" =~ ^https?:.*$ ]]; then
         if [[ "$TEST_OSD_PLUGIN" =~ .*SNAPSHOT.* ]]; then
          OSD_PLUGIN_FILE=$(curl -Ss --fail "https://maven.eliatra.com/artifactory/api/search/gavc?g=com.eliatra.suite&a=eliatra-suite-opensearch-dashboards-plugin&v=$TEST_OSD_PLUGIN&repos=eliatra-suite-snapshot"| grep zip|sed -E "s/(.*)\/(.*).zip(.*)/\2/"|sort|uniq|tail -n 1)
          TEST_OSD_PLUGIN=https://maven.eliatra.com/artifactory/eliatra-suite-snapshot/com/eliatra/suite/eliatra-suite-opensearch-dashboards-plugin/$TEST_OSD_PLUGIN/$OSD_PLUGIN_FILE.zip
          echo "Found: $TEST_OSD_PLUGIN"
         else
          OSD_PLUGIN_FILE=$(curl -Ss --fail "https://maven.search-guard.com/artifactory/api/search/gavc?g=com.eliatra.suite&a=eliatra-suite-opensearch-dashboards-pluginn&v=$TEST_OSD_PLUGIN&repos=eliatra-suite"| grep zip|sed -E "s/(.*)\/(.*).zip(.*)/\2/"|sort|uniq|tail -n 1)
          TEST_OSD_PLUGIN=https://maven.eliatra.com/artifactory/eliatra-suite/com/eliatra/suite/eliatra-suite-opensearch-dashboards-plugin/$TEST_OSD_PLUGIN/$OSD_PLUGIN_FILE.zip
          echo "Found: $TEST_OSD_PLUGIN"
         fi
       fi
       echo "export SP_SNAPSHOT=${TEST_OS_PLUGIN}" >> environment.env
       echo "export SP_VERSION=whatever" >> environment.env
       echo "export BASEIMAGE=0.9.3-open-jdk-11" >> environment.env
       echo "export OS_VERSION=$TEST_OS_VERSION" >> environment.env
       echo "export KI_SOURCE=none" >> environment.env
       echo "export SP_SOURCE=artifact" >> $CI_PROJECT_DIR/environment.env
       echo "export SP_ARTIFACT_PATH=$TEST_OS_PLUGIN" >> $CI_PROJECT_DIR/environment.env

       echo "export SP_SOURCE=snapshot" >> environment.env
       echo "export SP_SNAPSHOT=${TEST_OS_PLUGIN}" >> $CI_PROJECT_DIR/environment.env
       echo "export SP_VERSION=whatever" >> environment.env
       echo "export BASEIMAGE=0.9.3-open-jdk-11" >> $CI_PROJECT_DIR/environment.env
       echo "export OS_VERSION=$TEST_OS_VERSION" >> $CI_PROJECT_DIR/environment.env
       echo "export KIBANA_VERSION=${TEST_OSD_VERSION}"  >> $CI_PROJECT_DIR/environment.env
       echo "export OSD_VERSION=${TEST_OSD_VERSION}"  >> $CI_PROJECT_DIR/environment.env
       echo "export KI_URL=https://artifacts.opensearch.org/releases/bundle/opensearch-dashboards/$TEST_OSD_VERSION/opensearch-dashboards-$TEST_OSD_VERSION-linux-x64.tar.gz"
       echo "export KI_SNAPSHOT=${TEST_OSD_PLUGIN}"  >> $CI_PROJECT_DIR/environment.env
       echo "export KI_PLUGIN_VERSION=whatever" >> environment.env
       if [[ "$TEST_OSD_PLUGIN" =~ .*staging.* ]]; then
         echo "export KI_SOURCE=staging" >> $CI_PROJECT_DIR/environment.env
       else
         echo "export KI_SOURCE=snapshot" >> $CI_PROJECT_DIR/environment.env
       fi
       cat environment.env
       echo "============================================="
       . ./environment.env
       git clone --depth 1 --branch $TEST_IT_BRANCH  https://gitlab-ci-token:${CI_JOB_TOKEN}@git.eliatra.com/eliatra-suite/eliatra-opensearch-integration-tests.git > /dev/null
       cd eliatra-opensearch-integration-tests
       echo "Copying variables file"
       cp ../environment.env ./
       echo "Copying scripts for CI test execution"
       cp ci-tools/*.sh ./
       echo "Executing submit_test.sh"
       ./submit_test.sh "$TEST" ""
  needs:
    - job: deploy_snapshot
      artifacts: true
      optional: true
    - job: deploy_staging
      artifacts: true
      optional: true
  artifacts:
    when: always
    paths:
      - eliatra-opensearch-integration-tests/test/logs/
      - eliatra-opensearch-integration-tests/test/testresults/
      - eliatra-opensearch-integration-tests/environment.env
    reports:
      junit:
        - "eliatra-opensearch-integration-tests/test/testresults/Test*.xml"
        - "eliatra-opensearch-integration-tests/test/testresults/TEST*.xml"
    expire_in: 30 days
